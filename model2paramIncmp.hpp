
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model2paramIncmp_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 13, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 14, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 15, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 16, column 2 to column 11)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 17, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 18, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 19, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 20, column 2 to column 11)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 22, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 23, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 24, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 25, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 26, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 27, column 2 to column 27)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 30, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 30, column 2 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 31, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 31, column 2 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 32, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 32, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 33, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 33, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 34, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 34, column 2 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 35, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 35, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 36, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 36, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 37, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 37, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 38, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 38, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 39, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 39, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 40, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 40, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 41, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 41, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 42, column 14 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 42, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 44, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 45, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 46, column 2 to column 30)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 47, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 48, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 49, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 51, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 52, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 53, column 2 to column 30)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 54, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 55, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 56, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 59, column 4 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 60, column 4 to column 66)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 61, column 4 to column 66)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 62, column 4 to column 44)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 63, column 4 to column 44)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 64, column 4 to column 37)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 65, column 4 to column 43)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 66, column 4 to column 36)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 67, column 4 to column 36)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 68, column 4 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 69, column 4 to column 55)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 70, column 4 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 71, column 4 to column 51)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 72, column 4 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 73, column 4 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 58, column 19 to line 74, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 58, column 2 to line 74, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 2, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 3, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 4, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 5, column 13 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 5, column 18 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 5, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 6, column 12 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 6, column 17 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 6, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 7, column 8 to column 11)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 7, column 13 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 7, column 2 to column 18)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 8, column 12 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 8, column 17 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 8, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 22, column 10 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 23, column 10 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 24, column 17 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 24, column 22 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 25, column 10 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 26, column 10 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 27, column 17 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2paramIncmp.stan', line 27, column 22 to column 25)"};



class model2paramIncmp_model final : public model_base_crtp<model2paramIncmp_model> {

 private:
  int n_u;
  int n_w;
  int n_o;
  std::vector<std::vector<double>> delta;
  std::vector<std::vector<int>> n_rep;
  std::vector<std::vector<int>> y;
  std::vector<std::vector<int>> words;
 
 public:
  ~model2paramIncmp_model() { }
  
  inline std::string model_name() const final { return "model2paramIncmp_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model2paramIncmp_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model2paramIncmp_model_namespace::model2paramIncmp_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 70;
      context__.validate_dims("data initialization","n_u","int",
          context__.to_vec());
      n_u = std::numeric_limits<int>::min();
      
      current_statement__ = 70;
      n_u = context__.vals_i("n_u")[(1 - 1)];
      current_statement__ = 70;
      current_statement__ = 70;
      check_greater_or_equal(function__, "n_u", n_u, 0);
      current_statement__ = 71;
      context__.validate_dims("data initialization","n_w","int",
          context__.to_vec());
      n_w = std::numeric_limits<int>::min();
      
      current_statement__ = 71;
      n_w = context__.vals_i("n_w")[(1 - 1)];
      current_statement__ = 71;
      current_statement__ = 71;
      check_greater_or_equal(function__, "n_w", n_w, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization","n_o","int",
          context__.to_vec());
      n_o = std::numeric_limits<int>::min();
      
      current_statement__ = 72;
      n_o = context__.vals_i("n_o")[(1 - 1)];
      current_statement__ = 72;
      current_statement__ = 72;
      check_greater_or_equal(function__, "n_o", n_o, 0);
      current_statement__ = 73;
      validate_non_negative_index("delta", "n_u", n_u);
      current_statement__ = 74;
      validate_non_negative_index("delta", "n_o", n_o);
      current_statement__ = 75;
      context__.validate_dims("data initialization","delta","double",
          context__.to_vec(n_u, n_o));
      delta = std::vector<std::vector<double>>(n_u, std::vector<double>(n_o, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 75;
        assign(delta_flat__, nil_index_list(), context__.vals_r("delta"),
          "assigning variable delta_flat__");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
            current_statement__ = 75;
            assign(delta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              delta_flat__[(pos__ - 1)], "assigning variable delta");
            current_statement__ = 75;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 76;
      validate_non_negative_index("n_rep", "n_u", n_u);
      current_statement__ = 77;
      validate_non_negative_index("n_rep", "n_o", n_o);
      current_statement__ = 78;
      context__.validate_dims("data initialization","n_rep","int",
          context__.to_vec(n_u, n_o));
      n_rep = std::vector<std::vector<int>>(n_u, std::vector<int>(n_o, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> n_rep_flat__;
        current_statement__ = 78;
        assign(n_rep_flat__, nil_index_list(), context__.vals_i("n_rep"),
          "assigning variable n_rep_flat__");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
          current_statement__ = 78;
          for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
            current_statement__ = 78;
            assign(n_rep,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              n_rep_flat__[(pos__ - 1)], "assigning variable n_rep");
            current_statement__ = 78;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 79;
      validate_non_negative_index("y", "n_u", n_u);
      current_statement__ = 80;
      validate_non_negative_index("y", "n_o", n_o);
      current_statement__ = 81;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(n_u, n_o));
      y = std::vector<std::vector<int>>(n_u, std::vector<int>(n_o, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 81;
        assign(y_flat__, nil_index_list(), context__.vals_i("y"),
          "assigning variable y_flat__");
        current_statement__ = 81;
        pos__ = 1;
        current_statement__ = 81;
        for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
          current_statement__ = 81;
          for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
            current_statement__ = 81;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 81;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 82;
      validate_non_negative_index("words", "n_u", n_u);
      current_statement__ = 83;
      validate_non_negative_index("words", "n_o", n_o);
      current_statement__ = 84;
      context__.validate_dims("data initialization","words","int",
          context__.to_vec(n_u, n_o));
      words = std::vector<std::vector<int>>(n_u, std::vector<int>(n_o, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> words_flat__;
        current_statement__ = 84;
        assign(words_flat__, nil_index_list(), context__.vals_i("words"),
          "assigning variable words_flat__");
        current_statement__ = 84;
        pos__ = 1;
        current_statement__ = 84;
        for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
          current_statement__ = 84;
          for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
            current_statement__ = 84;
            assign(words,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              words_flat__[(pos__ - 1)], "assigning variable words");
            current_statement__ = 84;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 85;
      validate_non_negative_index("U1", "n_u", n_u);
      current_statement__ = 86;
      validate_non_negative_index("W1", "n_w", n_w);
      current_statement__ = 87;
      validate_non_negative_index("theta1_wu", "n_u", n_u);
      current_statement__ = 88;
      validate_non_negative_index("theta1_wu", "n_o", n_o);
      current_statement__ = 89;
      validate_non_negative_index("U2", "n_u", n_u);
      current_statement__ = 90;
      validate_non_negative_index("W2", "n_w", n_w);
      current_statement__ = 91;
      validate_non_negative_index("theta2_wu", "n_u", n_u);
      current_statement__ = 92;
      validate_non_negative_index("theta2_wu", "n_o", n_o);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += n_u;
      num_params_r__ += n_w;
      num_params_r__ += n_u * n_o;
      num_params_r__ += n_u;
      num_params_r__ += n_w;
      num_params_r__ += n_u * n_o;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model2paramIncmp_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ sg_u1;
      sg_u1 = DUMMY_VAR__;
      
      current_statement__ = 1;
      sg_u1 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        sg_u1 = stan::math::lb_constrain(sg_u1, 0, lp__);
      } else {
        current_statement__ = 1;
        sg_u1 = stan::math::lb_constrain(sg_u1, 0);
      }
      local_scalar_t__ sg_w1;
      sg_w1 = DUMMY_VAR__;
      
      current_statement__ = 2;
      sg_w1 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sg_w1 = stan::math::lb_constrain(sg_w1, 0, lp__);
      } else {
        current_statement__ = 2;
        sg_w1 = stan::math::lb_constrain(sg_w1, 0);
      }
      local_scalar_t__ sg_theta1;
      sg_theta1 = DUMMY_VAR__;
      
      current_statement__ = 3;
      sg_theta1 = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sg_theta1 = stan::math::lb_constrain(sg_theta1, 0, lp__);
      } else {
        current_statement__ = 3;
        sg_theta1 = stan::math::lb_constrain(sg_theta1, 0);
      }
      local_scalar_t__ mu1;
      mu1 = DUMMY_VAR__;
      
      current_statement__ = 4;
      mu1 = in__.scalar();
      local_scalar_t__ sg_u2;
      sg_u2 = DUMMY_VAR__;
      
      current_statement__ = 5;
      sg_u2 = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sg_u2 = stan::math::lb_constrain(sg_u2, 0, lp__);
      } else {
        current_statement__ = 5;
        sg_u2 = stan::math::lb_constrain(sg_u2, 0);
      }
      local_scalar_t__ sg_w2;
      sg_w2 = DUMMY_VAR__;
      
      current_statement__ = 6;
      sg_w2 = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        sg_w2 = stan::math::lb_constrain(sg_w2, 0, lp__);
      } else {
        current_statement__ = 6;
        sg_w2 = stan::math::lb_constrain(sg_w2, 0);
      }
      local_scalar_t__ sg_theta2;
      sg_theta2 = DUMMY_VAR__;
      
      current_statement__ = 7;
      sg_theta2 = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sg_theta2 = stan::math::lb_constrain(sg_theta2, 0, lp__);
      } else {
        current_statement__ = 7;
        sg_theta2 = stan::math::lb_constrain(sg_theta2, 0);
      }
      local_scalar_t__ mu2;
      mu2 = DUMMY_VAR__;
      
      current_statement__ = 8;
      mu2 = in__.scalar();
      std::vector<local_scalar_t__> U1;
      U1 = std::vector<local_scalar_t__>(n_u, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 9;
        assign(U1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable U1");}
      std::vector<local_scalar_t__> W1;
      W1 = std::vector<local_scalar_t__>(n_w, DUMMY_VAR__);
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        current_statement__ = 10;
        assign(W1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable W1");}
      std::vector<std::vector<local_scalar_t__>> theta1_wu;
      theta1_wu = std::vector<std::vector<local_scalar_t__>>(n_u, std::vector<local_scalar_t__>(n_o, DUMMY_VAR__));
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= n_o; ++sym2__) {
          current_statement__ = 11;
          assign(theta1_wu,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable theta1_wu");}}
      std::vector<local_scalar_t__> U2;
      U2 = std::vector<local_scalar_t__>(n_u, DUMMY_VAR__);
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 12;
        assign(U2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable U2");}
      std::vector<local_scalar_t__> W2;
      W2 = std::vector<local_scalar_t__>(n_w, DUMMY_VAR__);
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        current_statement__ = 13;
        assign(W2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable W2");}
      std::vector<std::vector<local_scalar_t__>> theta2_wu;
      theta2_wu = std::vector<std::vector<local_scalar_t__>>(n_u, std::vector<local_scalar_t__>(n_o, DUMMY_VAR__));
      
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= n_o; ++sym2__) {
          current_statement__ = 14;
          assign(theta2_wu,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable theta2_wu");}}
      {
        current_statement__ = 15;
        validate_non_negative_index("a", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> a;
        a = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(a, DUMMY_VAR__);
        
        current_statement__ = 17;
        validate_non_negative_index("b", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> b;
        b = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(b, DUMMY_VAR__);
        
        current_statement__ = 19;
        validate_non_negative_index("rate", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> rate;
        rate = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(rate, DUMMY_VAR__);
        
        current_statement__ = 21;
        validate_non_negative_index("exponent", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> exponent;
        exponent = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(exponent, DUMMY_VAR__);
        
        current_statement__ = 23;
        validate_non_negative_index("p", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> p;
        p = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(p, DUMMY_VAR__);
        
        current_statement__ = 25;
        validate_non_negative_index("p_suc", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> p_suc;
        p_suc = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(p_suc, DUMMY_VAR__);
        
        current_statement__ = 27;
        validate_non_negative_index("log_p", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> log_p;
        log_p = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(log_p, DUMMY_VAR__);
        
        current_statement__ = 29;
        validate_non_negative_index("y_arr", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> y_arr;
        y_arr = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(y_arr, DUMMY_VAR__);
        
        current_statement__ = 31;
        validate_non_negative_index("delta_arr", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> delta_arr;
        delta_arr = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(delta_arr, DUMMY_VAR__);
        
        current_statement__ = 33;
        validate_non_negative_index("n_rep_arr", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> n_rep_arr;
        n_rep_arr = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(n_rep_arr, DUMMY_VAR__);
        
        current_statement__ = 35;
        validate_non_negative_index("mu1_u", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu1_u;
        mu1_u = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(mu1_u, DUMMY_VAR__);
        
        current_statement__ = 37;
        validate_non_negative_index("mu2_u", "n_o", n_o);
        Eigen::Matrix<local_scalar_t__, -1, 1> mu2_u;
        mu2_u = Eigen::Matrix<local_scalar_t__, -1, 1>(n_o);
        stan::math::fill(mu2_u, DUMMY_VAR__);
        
        current_statement__ = 39;
        validate_non_negative_index("words_u", "n_o", n_o);
        std::vector<int> words_u;
        words_u = std::vector<int>(n_o, std::numeric_limits<int>::min());
        
        current_statement__ = 41;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_w1, 1, 1));
        current_statement__ = 42;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_u1, 1, 1));
        current_statement__ = 43;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_theta1, 1, 1));
        current_statement__ = 44;
        lp_accum__.add(normal_lpdf<propto__>(mu1, 0, 10));
        current_statement__ = 45;
        lp_accum__.add(normal_lpdf<propto__>(U1, 0, sg_u1));
        current_statement__ = 46;
        lp_accum__.add(normal_lpdf<propto__>(W1, 0, sg_w1));
        current_statement__ = 47;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_w2, 1, 1));
        current_statement__ = 48;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_u2, 1, 1));
        current_statement__ = 49;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_theta2, 1, 1));
        current_statement__ = 50;
        lp_accum__.add(normal_lpdf<propto__>(mu2, 0, 10));
        current_statement__ = 51;
        lp_accum__.add(normal_lpdf<propto__>(U2, 0, sg_u2));
        current_statement__ = 52;
        lp_accum__.add(normal_lpdf<propto__>(W2, 0, sg_w2));
        current_statement__ = 69;
        for (int u = 1; u <= n_u; ++u) {
          current_statement__ = 53;
          assign(words_u, nil_index_list(), words[(u - 1)],
            "assigning variable words_u");
          current_statement__ = 54;
          assign(mu1_u, nil_index_list(),
            add(rep_vector((mu1 + U1[(u - 1)]), n_o),
              to_vector(
                rvalue(W1, cons_list(index_multi(words_u), nil_index_list()),
                  "W1"))), "assigning variable mu1_u");
          current_statement__ = 55;
          assign(mu2_u, nil_index_list(),
            add(rep_vector((mu2 + U2[(u - 1)]), n_o),
              to_vector(
                rvalue(W2, cons_list(index_multi(words_u), nil_index_list()),
                  "W2"))), "assigning variable mu2_u");
          current_statement__ = 56;
          lp_accum__.add(
            normal_lpdf<propto__>(theta1_wu[(u - 1)], mu1_u, sg_theta1));
          current_statement__ = 57;
          lp_accum__.add(
            normal_lpdf<propto__>(theta2_wu[(u - 1)], mu2_u, sg_theta2));
          current_statement__ = 58;
          assign(a, nil_index_list(),
            stan::math::exp(to_vector(theta1_wu[(u - 1)])),
            "assigning variable a");
          current_statement__ = 59;
          assign(b, nil_index_list(),
            inv_logit(to_vector(theta2_wu[(u - 1)])), "assigning variable b");
          current_statement__ = 60;
          assign(n_rep_arr, nil_index_list(), to_vector(n_rep[(u - 1)]),
            "assigning variable n_rep_arr");
          current_statement__ = 61;
          assign(delta_arr, nil_index_list(), to_vector(delta[(u - 1)]),
            "assigning variable delta_arr");
          current_statement__ = 62;
          assign(y_arr, nil_index_list(), to_vector(y[(u - 1)]),
            "assigning variable y_arr");
          current_statement__ = 63;
          assign(exponent, nil_index_list(),
            elt_multiply(
              elt_multiply(minus(a), pow(subtract(1, b), n_rep_arr)),
              delta_arr), "assigning variable exponent");
          current_statement__ = 64;
          assign(p_suc, nil_index_list(), stan::math::exp(exponent),
            "assigning variable p_suc");
          current_statement__ = 65;
          assign(p, nil_index_list(),
            elt_multiply(pow(p_suc, y_arr),
              pow(subtract(1, p_suc), subtract(1, y_arr))),
            "assigning variable p");
          current_statement__ = 66;
          assign(log_p, nil_index_list(), stan::math::log(p),
            "assigning variable log_p");
          current_statement__ = 67;
          lp_accum__.add(sum(log_p));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model2paramIncmp_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double sg_u1;
      sg_u1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sg_u1 = in__.scalar();
      current_statement__ = 1;
      sg_u1 = stan::math::lb_constrain(sg_u1, 0);
      double sg_w1;
      sg_w1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sg_w1 = in__.scalar();
      current_statement__ = 2;
      sg_w1 = stan::math::lb_constrain(sg_w1, 0);
      double sg_theta1;
      sg_theta1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sg_theta1 = in__.scalar();
      current_statement__ = 3;
      sg_theta1 = stan::math::lb_constrain(sg_theta1, 0);
      double mu1;
      mu1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu1 = in__.scalar();
      double sg_u2;
      sg_u2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sg_u2 = in__.scalar();
      current_statement__ = 5;
      sg_u2 = stan::math::lb_constrain(sg_u2, 0);
      double sg_w2;
      sg_w2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sg_w2 = in__.scalar();
      current_statement__ = 6;
      sg_w2 = stan::math::lb_constrain(sg_w2, 0);
      double sg_theta2;
      sg_theta2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sg_theta2 = in__.scalar();
      current_statement__ = 7;
      sg_theta2 = stan::math::lb_constrain(sg_theta2, 0);
      double mu2;
      mu2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      mu2 = in__.scalar();
      std::vector<double> U1;
      U1 = std::vector<double>(n_u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 9;
        assign(U1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable U1");}
      std::vector<double> W1;
      W1 = std::vector<double>(n_w, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        current_statement__ = 10;
        assign(W1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable W1");}
      std::vector<std::vector<double>> theta1_wu;
      theta1_wu = std::vector<std::vector<double>>(n_u, std::vector<double>(n_o, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= n_o; ++sym2__) {
          current_statement__ = 11;
          assign(theta1_wu,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable theta1_wu");}}
      std::vector<double> U2;
      U2 = std::vector<double>(n_u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 12;
        assign(U2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable U2");}
      std::vector<double> W2;
      W2 = std::vector<double>(n_w, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        current_statement__ = 13;
        assign(W2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable W2");}
      std::vector<std::vector<double>> theta2_wu;
      theta2_wu = std::vector<std::vector<double>>(n_u, std::vector<double>(n_o, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= n_o; ++sym2__) {
          current_statement__ = 14;
          assign(theta2_wu,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable theta2_wu");}}
      vars__.emplace_back(sg_u1);
      vars__.emplace_back(sg_w1);
      vars__.emplace_back(sg_theta1);
      vars__.emplace_back(mu1);
      vars__.emplace_back(sg_u2);
      vars__.emplace_back(sg_w2);
      vars__.emplace_back(sg_theta2);
      vars__.emplace_back(mu2);
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        vars__.emplace_back(U1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        vars__.emplace_back(W1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          vars__.emplace_back(theta1_wu[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        vars__.emplace_back(U2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        vars__.emplace_back(W2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          vars__.emplace_back(theta2_wu[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double sg_u1;
      sg_u1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sg_u1 = context__.vals_r("sg_u1")[(1 - 1)];
      double sg_u1_free__;
      sg_u1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sg_u1_free__ = stan::math::lb_free(sg_u1, 0);
      double sg_w1;
      sg_w1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sg_w1 = context__.vals_r("sg_w1")[(1 - 1)];
      double sg_w1_free__;
      sg_w1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sg_w1_free__ = stan::math::lb_free(sg_w1, 0);
      double sg_theta1;
      sg_theta1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sg_theta1 = context__.vals_r("sg_theta1")[(1 - 1)];
      double sg_theta1_free__;
      sg_theta1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sg_theta1_free__ = stan::math::lb_free(sg_theta1, 0);
      double mu1;
      mu1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu1 = context__.vals_r("mu1")[(1 - 1)];
      double sg_u2;
      sg_u2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sg_u2 = context__.vals_r("sg_u2")[(1 - 1)];
      double sg_u2_free__;
      sg_u2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sg_u2_free__ = stan::math::lb_free(sg_u2, 0);
      double sg_w2;
      sg_w2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sg_w2 = context__.vals_r("sg_w2")[(1 - 1)];
      double sg_w2_free__;
      sg_w2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sg_w2_free__ = stan::math::lb_free(sg_w2, 0);
      double sg_theta2;
      sg_theta2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sg_theta2 = context__.vals_r("sg_theta2")[(1 - 1)];
      double sg_theta2_free__;
      sg_theta2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sg_theta2_free__ = stan::math::lb_free(sg_theta2, 0);
      double mu2;
      mu2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      mu2 = context__.vals_r("mu2")[(1 - 1)];
      std::vector<double> U1;
      U1 = std::vector<double>(n_u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      assign(U1, nil_index_list(), context__.vals_r("U1"),
        "assigning variable U1");
      std::vector<double> W1;
      W1 = std::vector<double>(n_w, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(W1, nil_index_list(), context__.vals_r("W1"),
        "assigning variable W1");
      std::vector<std::vector<double>> theta1_wu;
      theta1_wu = std::vector<std::vector<double>>(n_u, std::vector<double>(n_o, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> theta1_wu_flat__;
        current_statement__ = 11;
        assign(theta1_wu_flat__, nil_index_list(),
          context__.vals_r("theta1_wu"),
          "assigning variable theta1_wu_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
          current_statement__ = 11;
          for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
            current_statement__ = 11;
            assign(theta1_wu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              theta1_wu_flat__[(pos__ - 1)], "assigning variable theta1_wu");
            current_statement__ = 11;
            pos__ = (pos__ + 1);}}
      }
      std::vector<double> U2;
      U2 = std::vector<double>(n_u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(U2, nil_index_list(), context__.vals_r("U2"),
        "assigning variable U2");
      std::vector<double> W2;
      W2 = std::vector<double>(n_w, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(W2, nil_index_list(), context__.vals_r("W2"),
        "assigning variable W2");
      std::vector<std::vector<double>> theta2_wu;
      theta2_wu = std::vector<std::vector<double>>(n_u, std::vector<double>(n_o, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> theta2_wu_flat__;
        current_statement__ = 14;
        assign(theta2_wu_flat__, nil_index_list(),
          context__.vals_r("theta2_wu"),
          "assigning variable theta2_wu_flat__");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
          current_statement__ = 14;
          for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
            current_statement__ = 14;
            assign(theta2_wu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              theta2_wu_flat__[(pos__ - 1)], "assigning variable theta2_wu");
            current_statement__ = 14;
            pos__ = (pos__ + 1);}}
      }
      vars__.emplace_back(sg_u1_free__);
      vars__.emplace_back(sg_w1_free__);
      vars__.emplace_back(sg_theta1_free__);
      vars__.emplace_back(mu1);
      vars__.emplace_back(sg_u2_free__);
      vars__.emplace_back(sg_w2_free__);
      vars__.emplace_back(sg_theta2_free__);
      vars__.emplace_back(mu2);
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        vars__.emplace_back(U1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        vars__.emplace_back(W1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_o; ++sym2__) {
          vars__.emplace_back(theta1_wu[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        vars__.emplace_back(U2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        vars__.emplace_back(W2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_o; ++sym2__) {
          vars__.emplace_back(theta2_wu[(sym1__ - 1)][(sym2__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("sg_u1");
    names__.emplace_back("sg_w1");
    names__.emplace_back("sg_theta1");
    names__.emplace_back("mu1");
    names__.emplace_back("sg_u2");
    names__.emplace_back("sg_w2");
    names__.emplace_back("sg_theta2");
    names__.emplace_back("mu2");
    names__.emplace_back("U1");
    names__.emplace_back("W1");
    names__.emplace_back("theta1_wu");
    names__.emplace_back("U2");
    names__.emplace_back("W2");
    names__.emplace_back("theta2_wu");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_u)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_w)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_u),
                                             static_cast<size_t>(n_o)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_u)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_w)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_u),
                                             static_cast<size_t>(n_o)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sg_u1");
    param_names__.emplace_back(std::string() + "sg_w1");
    param_names__.emplace_back(std::string() + "sg_theta1");
    param_names__.emplace_back(std::string() + "mu1");
    param_names__.emplace_back(std::string() + "sg_u2");
    param_names__.emplace_back(std::string() + "sg_w2");
    param_names__.emplace_back(std::string() + "sg_theta2");
    param_names__.emplace_back(std::string() + "mu2");
    for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "W1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta1_wu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "W2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta2_wu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sg_u1");
    param_names__.emplace_back(std::string() + "sg_w1");
    param_names__.emplace_back(std::string() + "sg_theta1");
    param_names__.emplace_back(std::string() + "mu1");
    param_names__.emplace_back(std::string() + "sg_u2");
    param_names__.emplace_back(std::string() + "sg_w2");
    param_names__.emplace_back(std::string() + "sg_theta2");
    param_names__.emplace_back(std::string() + "mu2");
    for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "W1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta1_wu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "W2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta2_wu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sg_u1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_w1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_theta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_u2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_w2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_theta2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"U1\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"W1\",\"type\":{\"name\":\"array\",\"length\":" << n_w << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta1_wu\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"array\",\"length\":" << n_o << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"U2\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"W2\",\"type\":{\"name\":\"array\",\"length\":" << n_w << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta2_wu\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"array\",\"length\":" << n_o << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sg_u1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_w1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_theta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_u2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_w2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_theta2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"U1\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"W1\",\"type\":{\"name\":\"array\",\"length\":" << n_w << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta1_wu\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"array\",\"length\":" << n_o << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"U2\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"W2\",\"type\":{\"name\":\"array\",\"length\":" << n_w << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta2_wu\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"array\",\"length\":" << n_o << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = model2paramIncmp_model_namespace::model2paramIncmp_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model2paramIncmp_model_namespace::profiles__;
}

#endif


