
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model2_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 17, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 18, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 19, column 2 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 20, column 2 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 22, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 23, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 24, column 2 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 27, column 13 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 27, column 18 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 27, column 23 to column 26)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 27, column 2 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 28, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 28, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 29, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 29, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 30, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 30, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 31, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 31, column 2 to column 14)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 34, column 2 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 35, column 2 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 36, column 2 to column 29)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 37, column 2 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 39, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 40, column 2 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 44, column 6 to column 58)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 45, column 6 to column 65)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 43, column 21 to line 46, column 5)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 43, column 4 to line 46, column 5)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 42, column 19 to line 47, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 42, column 2 to line 47, column 3)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 49, column 2 to column 44)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 50, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 51, column 2 to column 28)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 52, column 2 to column 20)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 54, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 2, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 3, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 4, column 2 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 5, column 2 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 6, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 6, column 14 to column 17)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 6, column 19 to column 22)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 6, column 2 to column 24)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 7, column 8 to column 11)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 7, column 13 to column 16)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 7, column 18 to column 21)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 7, column 2 to column 23)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 10, column 9 to column 10)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 10, column 2 to column 18)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 11, column 12 to column 13)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 11, column 2 to column 15)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 13, column 2 to column 36)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 14, column 2 to column 25)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 22, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 23, column 9 to column 12)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 24, column 16 to column 19)",
                                                      " (in '/Users/aureliennioche/Documents/PythonProjects/ActiveTeachingCollaborative/model2.stan', line 24, column 21 to column 24)"};



class model2_model final : public model_base_crtp<model2_model> {

 private:
  int n_u;
  int n_w;
  int n_o;
  int n;
  std::vector<std::vector<std::vector<double>>> x;
  std::vector<std::vector<std::vector<int>>> y;
  Eigen::Matrix<double, -1, 1> x_arr;
  std::vector<int> y_arr;
 
 public:
  ~model2_model() { }
  
  inline std::string model_name() const final { return "model2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model2_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model2_model_namespace::model2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 37;
      context__.validate_dims("data initialization","n_u","int",
          context__.to_vec());
      n_u = std::numeric_limits<int>::min();
      
      current_statement__ = 37;
      n_u = context__.vals_i("n_u")[(1 - 1)];
      current_statement__ = 37;
      current_statement__ = 37;
      check_greater_or_equal(function__, "n_u", n_u, 0);
      current_statement__ = 38;
      context__.validate_dims("data initialization","n_w","int",
          context__.to_vec());
      n_w = std::numeric_limits<int>::min();
      
      current_statement__ = 38;
      n_w = context__.vals_i("n_w")[(1 - 1)];
      current_statement__ = 38;
      current_statement__ = 38;
      check_greater_or_equal(function__, "n_w", n_w, 0);
      current_statement__ = 39;
      context__.validate_dims("data initialization","n_o","int",
          context__.to_vec());
      n_o = std::numeric_limits<int>::min();
      
      current_statement__ = 39;
      n_o = context__.vals_i("n_o")[(1 - 1)];
      current_statement__ = 39;
      current_statement__ = 39;
      check_greater_or_equal(function__, "n_o", n_o, 0);
      current_statement__ = 40;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 40;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 40;
      current_statement__ = 40;
      check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 41;
      validate_non_negative_index("x", "n_w", n_w);
      current_statement__ = 42;
      validate_non_negative_index("x", "n_u", n_u);
      current_statement__ = 43;
      validate_non_negative_index("x", "n_o", n_o);
      current_statement__ = 44;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(n_w, n_u, n_o));
      x = std::vector<std::vector<std::vector<double>>>(n_w, std::vector<std::vector<double>>(n_u, std::vector<double>(n_o, std::numeric_limits<double>::quiet_NaN())));
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 44;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
            current_statement__ = 44;
            for (int sym3__ = 1; sym3__ <= n_w; ++sym3__) {
              current_statement__ = 44;
              assign(x,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                x_flat__[(pos__ - 1)], "assigning variable x");
              current_statement__ = 44;
              pos__ = (pos__ + 1);}}}
      }
      current_statement__ = 45;
      validate_non_negative_index("y", "n_w", n_w);
      current_statement__ = 46;
      validate_non_negative_index("y", "n_u", n_u);
      current_statement__ = 47;
      validate_non_negative_index("y", "n_o", n_o);
      current_statement__ = 48;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(n_w, n_u, n_o));
      y = std::vector<std::vector<std::vector<int>>>(n_w, std::vector<std::vector<int>>(n_u, std::vector<int>(n_o, std::numeric_limits<int>::min())));
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 48;
        assign(y_flat__, nil_index_list(), context__.vals_i("y"),
          "assigning variable y_flat__");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= n_o; ++sym1__) {
          current_statement__ = 48;
          for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
            current_statement__ = 48;
            for (int sym3__ = 1; sym3__ <= n_w; ++sym3__) {
              current_statement__ = 48;
              assign(y,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                y_flat__[(pos__ - 1)], "assigning variable y");
              current_statement__ = 48;
              pos__ = (pos__ + 1);}}}
      }
      current_statement__ = 49;
      validate_non_negative_index("x_arr", "n", n);
      current_statement__ = 50;
      x_arr = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(x_arr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 51;
      validate_non_negative_index("y_arr", "n", n);
      current_statement__ = 52;
      y_arr = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 53;
      assign(x_arr, nil_index_list(), to_vector(to_array_1d(x)),
        "assigning variable x_arr");
      current_statement__ = 54;
      assign(y_arr, nil_index_list(), to_array_1d(y),
        "assigning variable y_arr");
      current_statement__ = 55;
      validate_non_negative_index("W", "n_w", n_w);
      current_statement__ = 56;
      validate_non_negative_index("U", "n_u", n_u);
      current_statement__ = 57;
      validate_non_negative_index("theta_wu", "n_w", n_w);
      current_statement__ = 58;
      validate_non_negative_index("theta_wu", "n_u", n_u);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += n_w;
      num_params_r__ += n_u;
      num_params_r__ += n_w * n_u;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model2_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ sg_u;
      sg_u = DUMMY_VAR__;
      
      current_statement__ = 1;
      sg_u = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        sg_u = stan::math::lb_constrain(sg_u, 0, lp__);
      } else {
        current_statement__ = 1;
        sg_u = stan::math::lb_constrain(sg_u, 0);
      }
      local_scalar_t__ sg_w;
      sg_w = DUMMY_VAR__;
      
      current_statement__ = 2;
      sg_w = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sg_w = stan::math::lb_constrain(sg_w, 0, lp__);
      } else {
        current_statement__ = 2;
        sg_w = stan::math::lb_constrain(sg_w, 0);
      }
      local_scalar_t__ sg_theta;
      sg_theta = DUMMY_VAR__;
      
      current_statement__ = 3;
      sg_theta = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sg_theta = stan::math::lb_constrain(sg_theta, 0, lp__);
      } else {
        current_statement__ = 3;
        sg_theta = stan::math::lb_constrain(sg_theta, 0);
      }
      local_scalar_t__ mu;
      mu = DUMMY_VAR__;
      
      current_statement__ = 4;
      mu = in__.scalar();
      std::vector<local_scalar_t__> W;
      W = std::vector<local_scalar_t__>(n_w, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        current_statement__ = 5;
        assign(W, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable W");}
      std::vector<local_scalar_t__> U;
      U = std::vector<local_scalar_t__>(n_u, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 6;
        assign(U, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable U");}
      std::vector<std::vector<local_scalar_t__>> theta_wu;
      theta_wu = std::vector<std::vector<local_scalar_t__>>(n_w, std::vector<local_scalar_t__>(n_u, DUMMY_VAR__));
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          current_statement__ = 7;
          assign(theta_wu,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable theta_wu");}}
      {
        current_statement__ = 8;
        validate_non_negative_index("theta", "n_w", n_w);
        current_statement__ = 9;
        validate_non_negative_index("theta", "n_u", n_u);
        current_statement__ = 10;
        validate_non_negative_index("theta", "n_o", n_o);
        std::vector<std::vector<std::vector<local_scalar_t__>>> theta;
        theta = std::vector<std::vector<std::vector<local_scalar_t__>>>(n_w, std::vector<std::vector<local_scalar_t__>>(n_u, std::vector<local_scalar_t__>(n_o, DUMMY_VAR__)));
        
        current_statement__ = 12;
        validate_non_negative_index("theta_arr", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> theta_arr;
        theta_arr = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(theta_arr, DUMMY_VAR__);
        
        current_statement__ = 14;
        validate_non_negative_index("rate", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> rate;
        rate = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(rate, DUMMY_VAR__);
        
        current_statement__ = 16;
        validate_non_negative_index("exponent", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> exponent;
        exponent = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(exponent, DUMMY_VAR__);
        
        current_statement__ = 18;
        validate_non_negative_index("p", "n", n);
        Eigen::Matrix<local_scalar_t__, -1, 1> p;
        p = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
        stan::math::fill(p, DUMMY_VAR__);
        
        current_statement__ = 20;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_w, 1, 1));
        current_statement__ = 21;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_u, 1, 1));
        current_statement__ = 22;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sg_theta, 1, 1));
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<propto__>(mu, 0, 10));
        current_statement__ = 24;
        lp_accum__.add(normal_lpdf<propto__>(U, 0, sg_u));
        current_statement__ = 25;
        lp_accum__.add(normal_lpdf<propto__>(W, 0, sg_w));
        current_statement__ = 31;
        for (int u = 1; u <= n_u; ++u) {
          current_statement__ = 29;
          for (int w = 1; w <= n_w; ++w) {
            current_statement__ = 26;
            lp_accum__.add(
              normal_lpdf<propto__>(theta_wu[(w - 1)][(u - 1)],
                ((mu + U[(u - 1)]) + W[(w - 1)]), sg_theta));
            current_statement__ = 27;
            assign(theta,
              cons_list(index_uni(w),
                cons_list(index_uni(u), nil_index_list())),
              to_array_1d(rep_vector(theta_wu[(w - 1)][(u - 1)], n_o)),
              "assigning variable theta");}}
        current_statement__ = 32;
        assign(theta_arr, nil_index_list(), to_vector(to_array_1d(theta)),
          "assigning variable theta_arr");
        current_statement__ = 33;
        assign(rate, nil_index_list(), stan::math::exp(theta_arr),
          "assigning variable rate");
        current_statement__ = 34;
        assign(exponent, nil_index_list(), elt_multiply(minus(rate), x_arr),
          "assigning variable exponent");
        current_statement__ = 35;
        assign(p, nil_index_list(), stan::math::exp(exponent),
          "assigning variable p");
        current_statement__ = 36;
        lp_accum__.add(bernoulli_lpmf<propto__>(y_arr, p));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model2_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double sg_u;
      sg_u = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sg_u = in__.scalar();
      current_statement__ = 1;
      sg_u = stan::math::lb_constrain(sg_u, 0);
      double sg_w;
      sg_w = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sg_w = in__.scalar();
      current_statement__ = 2;
      sg_w = stan::math::lb_constrain(sg_w, 0);
      double sg_theta;
      sg_theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sg_theta = in__.scalar();
      current_statement__ = 3;
      sg_theta = stan::math::lb_constrain(sg_theta, 0);
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu = in__.scalar();
      std::vector<double> W;
      W = std::vector<double>(n_w, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        current_statement__ = 5;
        assign(W, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable W");}
      std::vector<double> U;
      U = std::vector<double>(n_u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        current_statement__ = 6;
        assign(U, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable U");}
      std::vector<std::vector<double>> theta_wu;
      theta_wu = std::vector<std::vector<double>>(n_w, std::vector<double>(n_u, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          current_statement__ = 7;
          assign(theta_wu,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable theta_wu");}}
      vars__.emplace_back(sg_u);
      vars__.emplace_back(sg_w);
      vars__.emplace_back(sg_theta);
      vars__.emplace_back(mu);
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        vars__.emplace_back(W[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        vars__.emplace_back(U[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_w; ++sym2__) {
          vars__.emplace_back(theta_wu[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double sg_u;
      sg_u = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sg_u = context__.vals_r("sg_u")[(1 - 1)];
      double sg_u_free__;
      sg_u_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      sg_u_free__ = stan::math::lb_free(sg_u, 0);
      double sg_w;
      sg_w = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sg_w = context__.vals_r("sg_w")[(1 - 1)];
      double sg_w_free__;
      sg_w_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sg_w_free__ = stan::math::lb_free(sg_w, 0);
      double sg_theta;
      sg_theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sg_theta = context__.vals_r("sg_theta")[(1 - 1)];
      double sg_theta_free__;
      sg_theta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sg_theta_free__ = stan::math::lb_free(sg_theta, 0);
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      mu = context__.vals_r("mu")[(1 - 1)];
      std::vector<double> W;
      W = std::vector<double>(n_w, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(W, nil_index_list(), context__.vals_r("W"),
        "assigning variable W");
      std::vector<double> U;
      U = std::vector<double>(n_u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(U, nil_index_list(), context__.vals_r("U"),
        "assigning variable U");
      std::vector<std::vector<double>> theta_wu;
      theta_wu = std::vector<std::vector<double>>(n_w, std::vector<double>(n_u, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> theta_wu_flat__;
        current_statement__ = 7;
        assign(theta_wu_flat__, nil_index_list(),
          context__.vals_r("theta_wu"), "assigning variable theta_wu_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= n_w; ++sym2__) {
            current_statement__ = 7;
            assign(theta_wu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              theta_wu_flat__[(pos__ - 1)], "assigning variable theta_wu");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      vars__.emplace_back(sg_u_free__);
      vars__.emplace_back(sg_w_free__);
      vars__.emplace_back(sg_theta_free__);
      vars__.emplace_back(mu);
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        vars__.emplace_back(W[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
        vars__.emplace_back(U[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_u; ++sym2__) {
          vars__.emplace_back(theta_wu[(sym1__ - 1)][(sym2__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("sg_u");
    names__.emplace_back("sg_w");
    names__.emplace_back("sg_theta");
    names__.emplace_back("mu");
    names__.emplace_back("W");
    names__.emplace_back("U");
    names__.emplace_back("theta_wu");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_w)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_u)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_w),
                                             static_cast<size_t>(n_u)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sg_u");
    param_names__.emplace_back(std::string() + "sg_w");
    param_names__.emplace_back(std::string() + "sg_theta");
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "W" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_w; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta_wu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sg_u");
    param_names__.emplace_back(std::string() + "sg_w");
    param_names__.emplace_back(std::string() + "sg_theta");
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= n_w; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "W" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_u; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_w; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "theta_wu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sg_u\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_w\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"W\",\"type\":{\"name\":\"array\",\"length\":" << n_w << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta_wu\",\"type\":{\"name\":\"array\",\"length\":" << n_w << ",\"element_type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"sg_u\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_w\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sg_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"W\",\"type\":{\"name\":\"array\",\"length\":" << n_w << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta_wu\",\"type\":{\"name\":\"array\",\"length\":" << n_w << ",\"element_type\":{\"name\":\"array\",\"length\":" << n_u << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = model2_model_namespace::model2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return model2_model_namespace::profiles__;
}

#endif


